import XMonad
import XMonad.Layout.StackTile
import qualified XMonad.Layout.ToggleLayouts as Tog
import XMonad.Layout.Maximize
import XMonad.Layout.Dishes
import XMonad.Hooks.DynamicLog
import XMonad.Hooks.ManageDocks
import XMonad.Operations
import XMonad.Util.Run(spawnPipe)
import XMonad.Util.EZConfig
import System.IO
import XMonad.Layout.Spiral
import XMonad.Layout.Tabbed
import XMonad.Layout.Roledex
import XMonad.Layout.ResizableTile
import XMonad.Actions.SwapWorkspaces
import XMonad.Layout.Grid
import XMonad.Layout.SubLayouts
import XMonad.Layout.WindowNavigation
import XMonad.Layout.TabBarDecoration
import System.IO
import XMonad.Layout.NoBorders (smartBorders)
import XMonad.Layout.Spiral
import XMonad.Layout.Circle
import XMonad.Layout.ThreeColumns
import XMonad.Actions.CopyWindow
import XMonad.Actions.CycleWS
import XMonad.Hooks.UrgencyHook
import XMonad.Hooks.FadeInactive        
import qualified Data.Map as M
import qualified XMonad.StackSet as W
import XMonad.Layout.ToggleLayouts
--xprop | grep WM_CLASS 
-- import XMonad.Actions.Volume
xK_XF86AudioLowerVolume = 0x1008ff11
xK_XF86AudioRaiseVolume = 0x1008ff13
xK_XF86AudioMute = 0x1008ff12
xK_XF86AudioPlay = 0x1008ff14
--xK_XF86AudioStop
xK_XF86Launch1 = 0x1008ff41
xK_XF86AudioPrev = 0x1008ff16
xK_XF86AudioNext = 0x1008ff17

myBorderWidth = 1
myModMask = mod4Mask
myNumlockMask = mod2Mask
--myWorkspaces = ["Shells","Emacs","WWW","IM", "Docs", "Media" ] ++ map show [6..9]
myWorkspaces = map show [1..9]
-- colors
colorA = "#212325" --gray
--colorB = "#00E1B3" --mint
--colorC = "#FFFF9A" --vanilla

colorC = "#00FCFC" --mint
colorB = "#FF0086" --vanilla

myNormalBorderColor = colorA
myFocusedBorderColor = colorB
myNormalBg = colorA
myNormalFg = colorC
myFocusedBg = colorA
myFocusedFg = colorC
--myFont = "Anonymous Pro-*-*-*-*-*-*-12-*-*-*-*-*-*-*"
myFont = "Anonymous Pro-*-*-*-*-*-13-*-*-*-*-*-*-*"

menuCmd = "dmenu_run -i -fn '" ++ myFont ++ "' -nb '" ++ myNormalBg ++ "' -nf '" ++ myNormalFg ++ "' -sb '" ++ myFocusedBg ++ "' -sf '" ++ myFocusedFg ++ "'"
--menuCmd = "dmenu_run" 

--mylayout = avoidStruts (tiled ||| Mirror tiled ||| spiral (6/7) ||| ThreeColumns ||| Full)
myLayout = avoidStruts(Tog.toggleLayouts Full (smartBorders(maximize(tiled ||| Mirror tiled ||| ThreeColMid 1 (3/100) (1/2) ||| Circle ||| spiral (6/7)))))
  where 
      tiled = Tall nmaster delta ratio
      nmaster = 1
      delta = 3/100
      ratio = 3/5

kill8 ss | Just w <- W.peek ss = (W.insertUp w) $ W.delete w ss | otherwise = ss

myManageHook = composeAll
   [ className =? "Rhythmbox" --> doShift "="
   , className =? "XDvi"      --> doShift "7:dvi"
   , className =? "Xmessage"  --> doFloat
   , className =? "Tomate"  --> doFloat
   , className =? "Lxrandr"  --> doFloat
   , className =? "Galculator"  --> doFloat
   , className =? "Transmission-gtk"  --> doFloat
   , className =? "Wicd-client.py"  --> doFloat
   , className =? "Fatrat"  --> doFloat
   , className =? "com-install4j-runtime-launcher-Launcher"  --> doFloat
   , className =? "Keepassx"  --> doFloat
   , className =? "processing-app-Base"  --> doFloat
   , className =? "feh"  --> doFloat
    --, className =? "Smplayer"      --> doIgnore
   , className =? "Smplayer"  --> doFloat
   , className =? "Minitube"  --> doFloat
   , className =? "Clipit"  --> doFloat
   , className =? "Gtk-gnash"  --> doFloat
   , className =? "Xarchiver"  --> doFloat
   , className =? "Kamerka"  --> doFloat
   , className =? "sun-applet-AppletViewer"  --> doFloat
   , className =? "Skype"  --> doShift "6" 
   , title =? "Buddy List"      --> doShift "6"
   , title =? "anamnesis"  --> doFloat
   , manageDocks
   ]

main = do
    xmproc <- spawnPipe "xmobar"
    xmonad $ defaultConfig
        { manageHook = myManageHook <+> manageHook defaultConfig
        , layoutHook = myLayout 
        , workspaces = myWorkspaces
        , normalBorderColor  = myNormalBorderColor
        , focusedBorderColor = myFocusedBorderColor
        --, logHook = fadeInactiveLogHook 0xdddddddd >> dynamicLogWithPP xmobarPP
        , logHook = dynamicLogWithPP xmobarPP
                        { 
                        ppOutput = hPutStrLn xmproc
                        , ppTitle = xmobarColor colorC"" . shorten 152
                        , ppLayout = const "" -- to disable the layout info on xmobar  
                        --}
    -- display current workspace as darkgrey on light grey (opposite of 
    -- default colors)
    --{ 
    , ppCurrent = xmobarColor colorC"" . wrap "" ""
    -- display other workspaces which contain windows as a brighter grey
    --, ppHidden          = xmobarColor "#909090"""

    -- display other workspaces with no windows as a normal grey
    --, ppHiddenNoWindows = "#606060" "" 
    , ppHiddenNoWindows = xmobarColor colorA""


    -- if a window on a hidden workspace needs my attention, color it so
    , ppUrgent          = xmobarColor "#ffffff"""

    ,ppWsSep           = ""

    -- put a few spaces between each object
    , ppSep             = "  "
    -- output to the handle we were given as an argument
    }
    , keys = myKeys
      , modMask = mod4Mask     -- Rebind Mod to the Windows key
        --, mod4Mask = xK_Alt_R
        } 
        `additionalMouseBindings`[
         ((mod4Mask, button2)                    , (\w -> spawn "touchtoggle"))
         ,((mod4Mask .|. shiftMask, button1)                    , (\w -> windows copyToAll))
         ,((mod4Mask .|. shiftMask, button3)                    , (\w -> killAllOtherCopies))
        ]

myKeys conf = M.fromList $
        [ ((mod4Mask .|. shiftMask, xK_z), spawn "xscreensaver-command -lock")
  	    , ((mod4Mask,xK_c), kill)
        , ((mod4Mask, xK_r), spawn ("exec " ++ menuCmd))
        , ((0, xK_Print), spawn "scrot -e -q 100 'mv $f ~/Screenshots/'")
        , ((shiftMask, xK_Print), spawn "sleep 0.2; scrot -q 100 -s -e 'mv $f ~/Screenshots/'")
        , ((mod4Mask .|. shiftMask, xK_s), spawn "sublime_text")
        --, ((mod4Mask .|. controlMask              , xK_equal), sendMessage MagnifyMore)
        --, ((mod4Mask .|. controlMask              , xK_minus), sendMessage MagnifyLess)
        --, ((mod4Mask .|. controlMask              , xK_m    ), sendMessage Toggle     )
        , ((mod4Mask                              , xK_Tab), toggleWS)
        , ((mod4Mask                              , xK_s), windows W.focusDown) -- %! Move focus to the next window
        , ((mod4Mask                              , xK_a), windows W.focusUp) -- %! Move focus to the next window
        , ((mod1Mask                              , xK_l), windows W.focusUp) -- logout!
        , ((mod4Mask                              , 0xffc1), spawn "xscreensaver & xscreensaver-command -lock") --lock by f4!
        , ((0                                     , xK_XF86Launch1), spawn "xscreensaver & xscreensaver-command -lock") --lock by f4!
        , ((shiftMask                             , xK_XF86Launch1), spawn "sudo pm-suspend") --sleep s!
        --, ((shiftMask .|. controlMask             , xK_b    ), spawn "anamnesis --browser")
        , ((mod4Mask  .|. shiftMask               , xK_e    ), spawn "xfce4-terminal -e ranger")
        , ((mod4Mask  .|. shiftMask               , xK_l    ), spawn "sudo pm-hibernate")
        -- increase/decrease transparency
        , ((mod4Mask  .|. shiftMask               , xK_comma), spawn "transset -a --dec .1")
        , ((mod4Mask  .|. shiftMask               , xK_period), spawn "transset -a --inc .1")
        --, ((mod4Mask                              , xK_l    ), spawn "slock")
        , ((0                                     , xK_XF86AudioPlay), spawn "cmus-remote -u")
        , ((0                                     , xK_XF86AudioNext), spawn "cmus-remote -n")
        , ((0                                     , xK_XF86AudioPrev), spawn "cmus-remote -r")
        , ((controlMask                           , xK_XF86AudioPlay), spawn "cmus-remote -s")
        --, ((0                                     , xK_XF86AudioLowerVolume), spawn "amixer set Master 3dB-") -- volume down
        --, ((0                                     , xK_XF86AudioRaiseVolume), spawn "amixer set Master 3dB+") -- volume up
        , ((0                                     , xK_XF86AudioRaiseVolume), spawn "pacmd dump|awk \'$1~/set-sink-volume/{system (\"pacmd \"$1\" \"$2\" \"$3+2000)}\'") -- volume up
        , ((0                                     , xK_XF86AudioLowerVolume), spawn "pacmd dump|awk \'$1~/set-sink-volume/{system (\"pacmd \"$1\" \"$2\" \"$3-2000)}\'") -- volume down
        --, ((0                                     , xK_XF86AudioMute), spawn "amixer -c0 sset Master toggle") -- volume up
        , ((0                                     , xK_XF86AudioMute), spawn "mute") -- volume up
        , ((mod4Mask .|. shiftMask                , xK_y), spawn "youtube-watch")
        , ((mod4Mask .|. shiftMask, xK_space)     , sendMessage (Tog.ToggleLayout))
        ] ++
    -- Alt+F1..F10 switches to workspace
    -- mod+F1..F10 moves window to workspace
    -- (Alt is in a nicer location for the thumb than the Windows key,
    -- and 1..9 keys are already in use by Firefox, irssi, ...)
    [ ((m, k), f i)
        | (i, k) <- zip (workspaces' conf) workspaceKeys
        , (f, m) <- [(windowsGreedyView, altMask), (windowsShift, myModMask)]
    ] ++
    -- mod+alt+F1..F10 moves window to workspace and switches to that workspace
    [ ((myModMask .|. altMask, k), windowsShift i >> windowsGreedyView i >> windowCenter) 
        | (i, k) <- zip (workspaces' conf) workspaceKeys
    ]
    where 
        workspaceKeys = [xK_F1 .. xK_F12]
        windowsShift      = windows . onCurrentScreen S.shift
        windowsGreedyView = windows . onCurrentScreen S.greedyView
        windowCenter = warpToWindow (1 % 6) (1 % 6)

        gotoWindow :: Window -> WindowSet -> WindowSet
        gotoWindow window ws = case S.findTag window ws of
                                 Just i -> viewOnScreen (screenIdFromTag i) i ws
                                 Nothing -> ws
            where
               screenIdFromTag :: WorkspaceId -> ScreenId
               screenIdFromTag = S . read . takeWhile (/= '_')
 

